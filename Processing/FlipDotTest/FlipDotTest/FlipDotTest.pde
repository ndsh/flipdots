
int sign_CE[]= {0x80, 0x81, 0xFF, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x8F};


int all_bright_CE[]= {0x80, 0x81, 0xFF, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
                                         0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x8F};

int all_bright_2C[]= {0x80, 0x83, 0xFF, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x8F};


int all_dark_CE[]= {0x80, 0x81, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8F};

int all_dark_2C[]= {0x80, 0x83, 0xFF, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x8F};


int refresh[]= {0x80, 0x82, 0x8F};

int index = 0;

import processing.serial.*;

Serial myPort;  // Create object from Serial class
boolean useSerial = false;
void setup() {
  
  String[] ports = Serial.list();
  println(ports);
  for (int i=0; i<ports.length; i++) {
    // if (ports[i].indexOf("/dev/tty.usbserial-FTR") != -1) {  // Linux
    //if (ports[i].indexOf("/dev/tty.usbmodem141") != -1) {  // mac
    if (ports[i].indexOf("/dev/ttyACM0") != -1) { // RasPi
      myPort = new Serial(this, ports[i], 57600);
      println("init serial "+ports[i]);
      useSerial = true;
      break;
    }
  }
  
  sign_CE[index+3] = 1;
}

void draw()
{
  /*
  sendToSerial(sign_CE);
  sendToSerial(refresh);
  
//  sendToSerial(all_dark_CE);
//  sendToSerial(refresh);
  
//  if (sign_CE[index+3] >= 0x7F) {
    sign_CE[index+3] = 0;
    sign_CE[index+3+28] = 0;
    if (index == 0) {
      sign_CE[index+3+27] = 0;
      sign_CE[index+3+28+27] = 0;
    }
    index ++;
    index %= 27;
    sign_CE[index+3] = 0x40;
    sign_CE[index+3+28] = 0x01;
    sign_CE[index+3+1] = 0x40;
    sign_CE[index+3+28+1] = 0x01;
//    sign_CE[index+3] = 1;
//  }
  */
  readSerial();
} 

void sendToSerial(int[] message) {
  if (!useSerial) return;
  //println(message.length);
  for (int i=0; i<message.length; i++) {
    myPort.write(message[i]); 
    print(message[i]+",");
  }
  println();
//  delay (70);
}

void readSerial() {  
  if (!useSerial) return;
  if ( myPort.available() > 0) {  // If data is available,
    char val = (char) myPort.read();
    print(val);
  }
}

void keyReleased() {
  
  if (key == CODED) {
    if (keyCode == UP) {
      sendToSerial(all_bright_2C);
      //sendToSerial(refresh);
    } else if (keyCode == DOWN) {
      sendToSerial(all_dark_2C);
      //sendToSerial(refresh);
    } 
  } else {
      sendToSerial(refresh);
  }
}